# -*- coding: utf-8 -*-
"""set1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v2twCZ2brMMDscOf4irrWwjH9IDCJTNu
"""

def count_negative_numbers(arr):
    count = 0
    for num in arr:
        if num < 0:
            count += 1
    return count

# Example usage
array = [1, -2, 3, -4, 5, -6]
negative_count = count_negative_numbers(array)
print(f'Total negative numbers in the array: {negative_count}')

def find_max_of_five():
    numbers = []

    # Taking 5 integers as input from the user
    for i in range(5):
        num = int(input(f"Enter integer {i + 1}: "))
        numbers.append(num)

    # Finding the maximum number
    max_number = max(numbers)

    print(f'The maximum of the entered numbers is: {max_number}')

# Example usage
find_max_of_five()

def merge_sorted_arrays(arr1, arr2):
    merged_array = []
    i, j = 0, 0

    # Merge the two arrays
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            merged_array.append(arr1[i])
            i += 1
        else:
            merged_array.append(arr2[j])
            j += 1

    # Add remaining elements from arr1
    while i < len(arr1):
        merged_array.append(arr1[i])
        i += 1

    # Add remaining elements from arr2
    while j < len(arr2):
        merged_array.append(arr2[j])
        j += 1

    return merged_array

# Example usage
array1 = [1, 3, 5, 7]
array2 = [2, 4, 6, 8]
merged_array = merge_sorted_arrays(array1, array2)
print(f'Merged sorted array: {merged_array}')

def reverse_numbers():
    numbers = []

    # Taking 7 integers as input from the user
    for i in range(7):
        num = int(input(f"Enter integer {i + 1}: "))
        numbers.append(num)

    # Reversing the order of numbers
    reversed_numbers = numbers[::-1]

    # Printing the reversed numbers
    print("Reversed order of numbers:", reversed_numbers)

# Example usage
reverse_numbers()

def is_palindrome():
    numbers = []

    # Taking 5 integers as input from the user
    for i in range(5):
        num = int(input(f"Enter integer {i + 1}: "))
        numbers.append(num)

    # Checking if the array is a palindrome
    if numbers == numbers[::-1]:
        print("The array is in palindrome order.")
    else:
        print("The array is not in palindrome order.")

# Example usage
is_palindrome()

def search_number():
    # Example array (you can modify this as needed)
    array = [10, 20, 30, 40, 50, 30, 70]

    # Taking the number to search from the user
    target = int(input("Enter the number to search: "))

    # Searching for the number
    for index, num in enumerate(array):
        if num == target:
            print(f'The index of the first occurrence of {target} is: {index}')
            return

    # If the number is not found
    print(-1)

# Example usage
search_number()

def print_unique_numbers():
    # Example array (you can modify this as needed)
    array = [1, 2, 3, 2, 4, 5, 1, 6, 7, 5]

    # Creating a set to find unique numbers
    unique_numbers = set(array)

    # Printing the unique numbers
    print("Unique numbers in the array:", unique_numbers)

# Example usage
print_unique_numbers()

def count_frequency():
    # Example array (you can modify this as needed)
    array = [1, 2, 2, 3, 4, 4, 4, 5, 5, 1]

    # Creating a dictionary to store frequency of each number
    frequency = {}

    # Counting the frequency of each number
    for num in array:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1

    # Printing the frequency of each number
    for num, count in frequency.items():
        print(f'Number {num}: {count} time(s)')

# Example usage
count_frequency()

def count_duplicates():
    # Example array (you can modify this as needed)
    array = [1, 2, 3, 2, 4, 4, 5, 5, 1, 6]

    # Creating a dictionary to store frequency of each number
    frequency = {}
    duplicate_count = 0

    # Counting the frequency of each number
    for num in array:
        if num in frequency:
            frequency[num] += 1
        else:
            frequency[num] = 1

    # Counting the number of duplicate numbers
    for count in frequency.values():
        if count > 1:
            duplicate_count += 1

    print(f'Total number of duplicate numbers: {duplicate_count}')

# Example usage
count_duplicates()

